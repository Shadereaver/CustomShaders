#include "/Engine/Public/Platform.ush"
#include "/Engine/Private/Common.ush"
#include "/Engine/Private/ScreenPass.ush"

SCREEN_PASS_TEXTURE_VIEWPORT(ViewParams)

SamplerState InputSampler;
Texture2D SceneColour;
Texture2D InputTexture;
Texture2D<uint2> InputStencilTexture;
Texture2D Velocity;

float2 PosToUV(float2 Pos)
{
	float2 ViewportUV = ((Pos - ViewParams_ViewportMin.xy) * ViewParams_ViewportSizeInverse.xy);
	return ViewportUV * ViewParams_UVViewportSize + ViewParams_UVViewportMin;
}

void UVMaskMainPS(
	float4 SvPosition : SV_POSITION,
	out float4 UVMask : SV_Target0,
	out float4 CopyColour : SV_Target1
)
{
	uint2 stencil = InputStencilTexture.Load(uint3(SvPosition.xy, 0));
	float2 UV = PosToUV(SvPosition.xy);
	if (stencil.y == 1)
	{
		UVMask = float4(UV.x, UV.y, 0, 1);
	}
	else
	{
		UVMask = float4(0, 0, 0, 0);
	}

	CopyColour = SceneColour.SampleLevel(InputSampler, UV, 0);
}

float4 CombineMainPS(float4 SvPosition : SV_POSITION) : SV_Target0
{
	float2 UV = PosToUV(SvPosition.xy);
	float4 samp = Texture2DSample(InputTexture, InputSampler, UV);

	if (length(samp.xyz) > 0)
	{
		
		return Texture2DSample(SceneColour, InputSampler, UV);
	}
	return Texture2DSample(SceneColour, InputSampler, UV);
}